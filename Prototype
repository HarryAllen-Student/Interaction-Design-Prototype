from adafruit_circuitplayground import cp
import board # access board pins to connext external sensors/actuators
import busio # ultrasonic sensor requires Serial connection to send/receive the distance data
import adafruit_us100 #
import time
import math


#------------------------ set up for ultrasonic sensor------------
uart = busio.UART(board.TX, board.RX, baudrate=9600) # obj_instance = busio.UART(TX, RX, speed)
us100 = adafruit_us100.US100(uart) # obj_instance = adafruit_us100.US100(connection)

cp.pixels.brightness = 0.1
run = True
replacevalues=True
averagevalues=[]
averagetot=0
previousaverage=10000
pausedtime=0
runtime=True

#---------------------------- setup for time lights --------------------

green = [0,255,0] # work time colour
blue = [0,0,255] # break time colour
off_state = [0,0,0]
pixel_amount = len(cp.pixels)
cp.pixels.brightness = 0.1

work_time_minutes = 50
work_time_increment = work_time_minutes/pixel_amount # set how many minutes are in 1 neopixel (10)
time_elapsed_secs = 0

break_amount = 3
break_interval_lib = {1:5,2:4,3:3,4:2}
break_interval = break_interval_lib[break_amount]
turn_off = False
j = 0

#----------------------main code---------------------------
while True:

    stop_timer = 0
    stopped_time = 0
    previous = time.time()


    while j < pixel_amount:
        current = time.time()
        distance = us100.distance
        while len(averagevalues)<=9:            #fill the list initially
            averagevalues.append(distance)
            distance = us100.distance
        for i in averagevalues:                 #add all the values together
            averagetot+=i

        average=averagetot/len(averagevalues)

        print(average)
        while replacevalues==True:                 #move all the values forward and replace last value
            averagevalues[0]=averagevalues[1]
            averagevalues[1]=averagevalues[2]
            averagevalues[2]=averagevalues[3]
            averagevalues[3]=averagevalues[4]
            averagevalues[4]=averagevalues[5]
            averagevalues[5]=averagevalues[6]
            averagevalues[6]=averagevalues[7]
            averagevalues[7]=averagevalues[8]
            averagevalues[8]=averagevalues[9]
            averagevalues[9]=distance
            replacevalues=False
       # print("moved: ", averagevalues)

        if math.fabs(average-previousaverage)>=10:
            if average-previousaverage<0:

                runtime=True

            elif average-previousaverage>0:

                runtime=False
        if runtime==True:

            if (j+1) % break_interval == 0 and i!= 9:
                cp.pixels[j] = blue
                if cp.switch == True: # beep
                    while turn_off == False:# beep
                        cp.play_tone(262,0.5)
                        #time.sleep(0.05)
                        if cp.button_a == True:
                            turn_off = True
                else: #flash
                    #if cp.button_a == True:
                        #turn_off = True
                    while turn_off == False:
                        cp.pixels[j] = blue
                        time.sleep(0.1)
                        cp.pixels[j] = off_state
                        time.sleep(0.1)
                        if cp.button_a:
                            turn_off = True
                cp.pixels[j] = blue




            else:
                cp.pixels[j] = green




            time_elapsed_secs = (current - previous) - stopped_time
            print("Seconds elapsed: ",time_elapsed_secs)


            if time_elapsed_secs % work_time_increment == 0 and time_elapsed_secs != 0:
                j+= 1
                turn_off = False
                time.sleep(1)
        elif runtime==False:
            current_stop = time.time()
            stopped_time =(current_stop - previous) - time_elapsed_secs
            print("stopped at: ", time_elapsed_secs)
            print("stopped for: ", stopped_time)


        time.sleep(0.2)
        replacevalues=True
        averagetot=0
        previousaverage=average
